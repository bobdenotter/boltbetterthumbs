# Filesystem
# Default is local files (from "files" in your bolt install)
# You can also use an in memory filesystem if you're using Varnish so images aren't saved twice to your disk
# Images will only be cached through varnish and not saved to disk in "files/.cache"
# options to use here are:
# Filesystem:
#   adapter: local
# Filesystem:
#   adapter: memory
#
# If you wish to change this from the default of "local" uncomment the section below and enter in memory
# --------------------------------------------------------------------------------- #
#Filesystem:
#  adapter: local

# --------------------------------------------------------------------------------- #
# The Image Drive You Want to use.
# Default is 'gd' which is the same one Bolt uses for it's thumbnail handling.
# Options are:
# * GD
# * Imagick -> you'll need the imagick php extension for this to work
# http://php.net/manual/en/book.imagick.php
Image_Driver: 'gd'

# --------------------------------------------------------------------------------- #
# To use picturefill for older browsers that don't recognize img srcset
# picturefill docs and usage page: http://scottjehl.github.io/picturefill/
# values are true or false.
# true means "yes use picturefill"
# false means "no I don't want to use picturefill"
# --------------------------------------------------------------------------------- #
picturefill: false

# --------------------------------------------------------------------------------- #
# Not Found Image.
# If the image doesn't exist this is the image that will be served in it's place.
#
# If this is enabled and the image portion is left blank then Bolt's default
# "bolt-public/view/img/default_notfound.png" will be used. You can supply your own not found image if you like just
# put the path to your image you'd like to use for instance:
# 404_Image: '/theme/yourTheme/img/notfound.png'
# --------------------------------------------------------------------------------- #
#404_Image: /path/to/your/image.png


# --------------------------------------------------------------------------------- #
# SECURITY
# Secure your thumbnails with a key. This is defaulted to True which means any thumbnail
#modification done that is not signed with your key will not be allowed to be made.
# a 128 character key or larger is recommended to be used.
#
# max_image_size: limits how large images can be generated see: http://glide.thephpleague.com/1.0/config/security/#max-image-size
# you should put a number here how large you want the image to be. Like the example from Glide's docs of
# 2000*2000 the max would be 4000000.
# Use the result of the multiplication here. ex 300 * 300 would be:
# max_image_size: 90000
# --------------------------------------------------------------------------------- #
security:
  secure_thumbs: true
  secure_sign_key: '5kLobJbjDNwpZgkbj4l0Mh1ZI1eeoa55BPVymrby/77aF0VaLOB40189PGhIt/bG0OlekrIAxJ4nfz6UP1yWRF12359BSZkul6q9AZA0Jtgg+Ok9CbfsEH5qZNQJiyy8zTmqVjvso1JewwBBu8LcnsFECzs2WBU0A9IGfcgj2So='
  max_image_size: 4000000


# --------------------------------------------------------------------------------- #
# Defaults
# Defaults used for each and every image manipulation.
# We've set the quality of images to 80 to match Bolt's thumbnail handler you can override this
# with a setting of your choosing. But choose wisely big images = unnecessary load on the users end.
# --------------------------------------------------------------------------------- #
defaults:
  q: 80

# --------------------------------------------------------------------------------- #
# Presets
# Standard Image Manipulations used throughout your site.
# The '&presets' after 'presets:' is there for use in a repeated node. It gives these presets a name
# and allows us to use these settings again somewhere else in a named config
# --------------------------------------------------------------------------------- #
presets: &presets
  small:
    w: 175
    fit: stretch
  medium:
    w: 350
    fit: stretch
  large:
    w: 700
    fit: stretch
  xlarge:
    w: 1400
    fit: stretch


# --------------------------------------------------------------------------------- #
# LazyLoad settings.
#
# These are settings you can use yaml's repeated nodes to insert into your named config block.
# By Default this extension uses lazysizes ( https://github.com/aFarkas/lazysizes ) and the markup patterns
# shown in its readme. those being: simple pattern, combined pattern, low quality image placeholder and
# modern transparent srcset pattern.
# this has two options. lazysizes which is a boolean (true or false) and the pattern you wish to use.
# for a low quality placeholder an image that is 60 quality will be served.
# if lazysizes is false then the lazysizes script will not be included. You'll have to include this yourself in your
# page/template
# see the lazyload config block further down for an example of how this can be used.
#
# auto_sizes will automatically create your sizes attribute but you may need to add some styles.
# see https://github.com/aFarkas/lazysizes#markup-api for more info
#
# --------------------------------------------------------------------------------- #
lazyload_settings: &lazySettings
  lazysizes: true # or false
  pattern: lqip # valid options here: lqip, simple, combined, modern
  auto_sizes: true # this is true or false. see https://github.com/aFarkas/lazysizes#markup-api


# --------------------------------------------------------------------------------- #
# The extensions fall back defaults.
# This uses yaml's "repeated nodes". This will take the settings set in Presets above and use them as
# "defaults". You can use them as well in any named config you wish to use/create
# --------------------------------------------------------------------------------- #
betterthumbs:
  save_data: true
  altText: ~
  widthDensity: 'w'
  sizes: [ '100vw' ]
  modifications:
    <<: *presets


# --------------------------------------------------------------------------------- #
# a named image configuration group.
# --------------------------------------------------------------------------------- #
srcset:
  sizes: [ '100vw'  ]
  modifications:
    small: { 'w': 340 }
    medium: { 'w': 680 }
    large: { 'w': 800 }
    xlarge: { 'w': 1260 }


ScreenDensity:
  class: []
  altText: '~'
  widthDensity: 'x'
  resolutions: [ 1, 2, 3 ]
  modifications:
    small: { 'w': 175, 'fit': 'stretch' }
    medium:
      w: 350
      fit: stretch
    large:
      w: 700
      fit: stretch
    xlarge:
      w: 1400
      fit: stretch


# --------------------------------------------------------------------------------- #
# Single Image Source Generation.
#
# Will give you just the string of the image. ie:
# /img/your-image.jpg?your-modifications&s=signkeyhere
#
# This config setup can only be used with the tag of {{ bthumb( record.image, 'single' ) }}
# NOT the tag of {{ img( record.image, 'config name here' ) }}
# --------------------------------------------------------------------------------- #
single:
  w: 200



# --------------------------------------------------------------------------------- #
# lazyload example named config block
# --------------------------------------------------------------------------------- #
lazyloaded:
  class: ['this-is', 'a_lazyloaded', 'img-tag' ]
  id: 'js-lazysizes'
  data_attrib: { 'lazy': 'sizes'}
  altText: '~'
  widthDensity: 'w'
  sizes: [ '100vw'  ]
  lazyload:
    <<: *lazySettings
  use_original: 800
  modifications:
    small:
      w: 200
      fit: 'crop'
    medium:
      w: 350
      fit: 'crop'
    large:
      w: 500
      fit: 'stretch'
    1_large:
      w: 650
      fit: 'stretch'
    2_large:
      w: 900
    xlarge:
      w: 1400
      fit: 'stretch'

# --------------------------------------------------------------------------------- #
#
# All available configuration options:
#
# --------------------------------------------------------------------------------- #

# class: []
# id: ''
# data_attrib: { 'key': 'value'}
# altText: ''
# widthDensity: 'w' or 'x'
# sizes: []
# resolutions: [ ]
# use_original:
# modifications:
#  modifications here:::
